date.date=as.Date(mtx.date)
fund.xts=xts(df.clean.ret,date.date)
nrows=dim(fund.xts)[1]
if (nrows>=60){
n.periods=60
trailing60.rows=(nrows-n.periods+1):nrows
ret.60=fund.xts[trailing60.rows]
totalret.5=prod(ret.60+1)-1
ann.ret.5=(totalret.5+1)^(12/n.periods)-1
ann.std.5=sd(ret.60)*sqrt(12)
downrisk.5=sd(ret.60[(ret.60<0)])*sqrt(12)
v.cumret.5=matrix(1,nrow=n.periods+1,ncol=1)
v.maxdd.5=matrix(0,nrow=n.periods,ncol=1)
for (i in 2:n.periods+1){
v.cumret.5[i]=v.cumret.5[i-1]*(ret.60[i-1]+1)
v.maxdd.5[i-1]=v.cumret.5[i]/max(v.cumret.5[1:i])
}
drawdown.5=min(v.maxdd.5)
sharpe.5=(ann.ret.5-rfrate)/ann.std.5
sortino.5=(ann.ret.5-rfrate)/downrisk.5
omega.5=Omega(ret.60)
wl.5=length(which(ret.60>0))/n.periods
skewness.5=skewness(ret.60)
kurtosis.5=kurtosis(ret.60)
ann.ret.60=Return.annualized(ret.60)
ann.std.60=StdDev.annualized(ret.60)
downrisk.60=DownsideDeviation(ret.60)
drawdown.60=maxDrawdown(ret.60,invert=FALSE)
sharpe.60=SharpeRatio(ret.60, Rf = rfrate, FUN="StdDev")
sortino.60=SortinoRatio(ret.60)
#info_ratio.60=InformationRatio(ret.60,bench.60,12)
omega.60=Omega(ret.60)
wl.60=UpsideFrequency(ret.60,MAR=0)
skewness.60=skewness(ret.60)
kurtosis.60=kurtosis(ret.60)
fund.name=colnames(ann.ret.60)
ann.ret.60=as.numeric(ann.ret.60)
ann.std.60=as.numeric(ann.std.60)
sharpe.60=as.numeric(sharpe.60)
sortino.60=as.numeric(sortino.60)
omega.60=as.numeric(omega.60)
df.ret.60=as.data.frame(cbind(ret.60))
temp.metrics.60=as.data.frame(cbind(ann.ret.60,ann.std.60,downrisk.60,drawdown.60
,sharpe.60,sortino.60,omega.60
,wl.60,skewness.60,kurtosis.60),row.names=fund.name)
df.metrics.60=rbind(df.metrics.60,temp.metrics.60)
omega.5=as.numeric(omega.5)
temp.metrics.5=as.data.frame(cbind(ann.ret.5,ann.std.5,downrisk.5,drawdown.5
,sharpe.5,sortino.5,omega.5
,wl.5,skewness.5,kurtosis.5),row.names=fund.name)
df.metrics.5=rbind(df.metrics.5,temp.metrics.5)
}
}
outfile="rpackage_output_mn.csv"
outfile2="rcustom_output_mn.csv"
file_dir_out=paste(pathname,outfile,sep="")
file_dir_out_2=paste(pathname,outfile2,sep="")
write.csv(df.metrics.60, file_dir_out)
write.csv(df.metrics.5, file_dir_out2)
write.csv(df.metrics.5, file_dir_out_2)
View(v.maxdd.5)
df.ret.60=NULL;
df.metrics.60=NULL
df.metrics.5=NULL
df.metrics.incep=NULL
for (i in 1:n_sec) {
df.ret=as.data.frame(list_ret[i]/100)
#df.ret=as.data.frame(list_ret["DERNMOF.US.Equity"]/100)
df.date=as.data.frame(list_date[i])
#df.date=as.data.frame(list_date["DERNMOF.US.Equity"])
df.clean.ret=as.data.frame(df.ret[!is.na(df.ret)])
colnames(df.clean.ret)=colnames(df.ret)
df.clean.date=as.data.frame(df.date[!is.na(df.ret)])
colnames(df.clean.date)=colnames(df.ret)
mtx.date=as.matrix(df.clean.date)
date.date=as.Date(mtx.date)
fund.xts=xts(df.clean.ret,date.date)
nrows=dim(fund.xts)[1]
if (nrows>=60){
n.periods=60
trailing60.rows=(nrows-n.periods+1):nrows
ret.60=fund.xts[trailing60.rows]
totalret.5=prod(ret.60+1)-1
ann.ret.5=(totalret.5+1)^(12/n.periods)-1
ann.std.5=sd(ret.60)*sqrt(12)
downrisk.5=sd(ret.60[(ret.60<0)])*sqrt(12)
v.cumret.5=matrix(1,nrow=n.periods+1,ncol=1)
v.maxdd.5=matrix(0,nrow=n.periods,ncol=1)
for (i in 2:n.periods+1){
v.cumret.5[i]=v.cumret.5[i-1]*(ret.60[i-1]+1)
v.maxdd.5[i-1]=v.cumret.5[i]/max(v.cumret.5[1:i])-1
}
drawdown.5=min(v.maxdd.5)
sharpe.5=(ann.ret.5-rfrate)/ann.std.5
sortino.5=(ann.ret.5-rfrate)/downrisk.5
omega.5=Omega(ret.60)
wl.5=length(which(ret.60>0))/n.periods
skewness.5=skewness(ret.60)
kurtosis.5=kurtosis(ret.60)
ann.ret.60=Return.annualized(ret.60)
ann.std.60=StdDev.annualized(ret.60)
downrisk.60=DownsideDeviation(ret.60)
drawdown.60=maxDrawdown(ret.60,invert=FALSE)
sharpe.60=SharpeRatio(ret.60, Rf = rfrate, FUN="StdDev")
sortino.60=SortinoRatio(ret.60)
#info_ratio.60=InformationRatio(ret.60,bench.60,12)
omega.60=Omega(ret.60)
wl.60=UpsideFrequency(ret.60,MAR=0)
skewness.60=skewness(ret.60)
kurtosis.60=kurtosis(ret.60)
fund.name=colnames(ann.ret.60)
ann.ret.60=as.numeric(ann.ret.60)
ann.std.60=as.numeric(ann.std.60)
sharpe.60=as.numeric(sharpe.60)
sortino.60=as.numeric(sortino.60)
omega.60=as.numeric(omega.60)
df.ret.60=as.data.frame(cbind(ret.60))
temp.metrics.60=as.data.frame(cbind(ann.ret.60,ann.std.60,downrisk.60,drawdown.60
,sharpe.60,sortino.60,omega.60
,wl.60,skewness.60,kurtosis.60),row.names=fund.name)
df.metrics.60=rbind(df.metrics.60,temp.metrics.60)
omega.5=as.numeric(omega.5)
temp.metrics.5=as.data.frame(cbind(ann.ret.5,ann.std.5,downrisk.5,drawdown.5
,sharpe.5,sortino.5,omega.5
,wl.5,skewness.5,kurtosis.5),row.names=fund.name)
df.metrics.5=rbind(df.metrics.5,temp.metrics.5)
}
}
View(df.metrics.5)
write.csv(df.metrics.60, file_dir_out)
write.csv(df.metrics.5, file_dir_out_2)
View(raw_securities)
source('~/git/working_dir/R/Code/risk_metric_v3_historical.r', echo=TRUE)
View(df.metrics.5)
View(v.maxdd.5)
View(v.cumret.5)
View(ret.60)
v.cumret.5=matrix(1,nrow=n.periods+1,ncol=1)
v.maxdd.5=matrix(0,nrow=n.periods,ncol=1)
i=2
v.cumret.5[i]=v.cumret.5[i-1]*(ret.60[i-1]+1)
df.ret.60=NULL;
df.metrics.60=NULL
df.metrics.5=NULL
df.metrics.incep=NULL
for (i in 1:n_sec) {
df.ret=as.data.frame(list_ret[i]/100)
#df.ret=as.data.frame(list_ret["DERNMOF.US.Equity"]/100)
df.date=as.data.frame(list_date[i])
#df.date=as.data.frame(list_date["DERNMOF.US.Equity"])
df.clean.ret=as.data.frame(df.ret[!is.na(df.ret)])
colnames(df.clean.ret)=colnames(df.ret)
df.clean.date=as.data.frame(df.date[!is.na(df.ret)])
colnames(df.clean.date)=colnames(df.ret)
mtx.date=as.matrix(df.clean.date)
date.date=as.Date(mtx.date)
fund.xts=xts(df.clean.ret,date.date)
nrows=dim(fund.xts)[1]
if (nrows>=60){
n.periods=60
trailing60.rows=(nrows-n.periods+1):nrows
ret.60=fund.xts[trailing60.rows]
totalret.5=prod(ret.60+1)-1
ann.ret.5=(totalret.5+1)^(12/n.periods)-1
ann.std.5=sd(ret.60)*sqrt(12)
downrisk.5=sd(ret.60[(ret.60<0)])*sqrt(12)
v.cumret.5=matrix(1,nrow=n.periods+1,ncol=1)
v.maxdd.5=matrix(0,nrow=n.periods,ncol=1)
for (j in 2:n.periods+1){
v.cumret.5[j]=v.cumret.5[j-1]*(ret.60[j-1]+1)
v.maxdd.5[j-1]=v.cumret.5[j]/max(v.cumret.5[1:j])-1
}
drawdown.5=min(v.maxdd.5)
sharpe.5=(ann.ret.5-rfrate)/ann.std.5
sortino.5=(ann.ret.5-rfrate)/downrisk.5
omega.5=Omega(ret.60)
wl.5=length(which(ret.60>0))/n.periods
skewness.5=skewness(ret.60)
kurtosis.5=kurtosis(ret.60)
ann.ret.60=Return.annualized(ret.60)
ann.std.60=StdDev.annualized(ret.60)
downrisk.60=DownsideDeviation(ret.60)
drawdown.60=maxDrawdown(ret.60,invert=FALSE)
sharpe.60=SharpeRatio(ret.60, Rf = rfrate, FUN="StdDev")
sortino.60=SortinoRatio(ret.60)
#info_ratio.60=InformationRatio(ret.60,bench.60,12)
omega.60=Omega(ret.60)
wl.60=UpsideFrequency(ret.60,MAR=0)
skewness.60=skewness(ret.60)
kurtosis.60=kurtosis(ret.60)
fund.name=colnames(ann.ret.60)
ann.ret.60=as.numeric(ann.ret.60)
ann.std.60=as.numeric(ann.std.60)
sharpe.60=as.numeric(sharpe.60)
sortino.60=as.numeric(sortino.60)
omega.60=as.numeric(omega.60)
df.ret.60=as.data.frame(cbind(ret.60))
temp.metrics.60=as.data.frame(cbind(ann.ret.60,ann.std.60,downrisk.60,drawdown.60
,sharpe.60,sortino.60,omega.60
,wl.60,skewness.60,kurtosis.60),row.names=fund.name)
df.metrics.60=rbind(df.metrics.60,temp.metrics.60)
omega.5=as.numeric(omega.5)
temp.metrics.5=as.data.frame(cbind(ann.ret.5,ann.std.5,downrisk.5,drawdown.5
,sharpe.5,sortino.5,omega.5
,wl.5,skewness.5,kurtosis.5),row.names=fund.name)
df.metrics.5=rbind(df.metrics.5,temp.metrics.5)
}
}
v.cumret.5=matrix(1,nrow=n.periods+1,ncol=1)
for (j in 2:3){
v.cumret.5[j]=v.cumret.5[j-1]*(ret.60[j-1]+1)
v.maxdd.5[j-1]=v.cumret.5[j]/max(v.cumret.5[1:j])-1
}
for (j in 2:(n.periods+1)){
v.cumret.5[j]=v.cumret.5[j-1]*(ret.60[j-1]+1)
v.maxdd.5[j-1]=v.cumret.5[j]/max(v.cumret.5[1:j])-1
}
source('~/git/working_dir/R/Code/risk_metric_v3_historical.r', echo=TRUE)
infile="em_list.csv"
outfile="rcustom_output_em.csv"
fund_metric(infile,outfile)
fund_metric(infile,outfile)
source('~/git/working_dir/R/Code/fund_metric.r', echo=TRUE)
View(output)
source('~/git/working_dir/R/Code/fund_metric.r', echo=TRUE)
source('~/git/working_dir/R/Code/hflist_risk_metric_v3.r', echo=TRUE)
View(df.ret)
colnames(df.clean.ret)
View(df.metrics.5)
source('~/git/working_dir/R/Code/fund_metric.r', echo=TRUE)
source('~/git/working_dir/R/Code/fund_metric.r', echo=TRUE)
source('~/git/working_dir/R/Code/fund_metric.r', echo=TRUE)
source('~/git/working_dir/R/Code/fund_metric.r', echo=TRUE)
###Assign input values
infile="em_list.csv"
#outfile="rcustom_output_em.csv"
outfile="rcustom_output_em_incep.csv"
#infile="asia_list.csv"
#outfile="rcustom_output_asia.csv"
#infile="mn_list.csv"
#outfile2="rpackage_output_mn.csv"
#outfile="rcustom_output_mn.csv"
#infile="allhf_list.csv"
#outfile="rcustom_output_allhf.csv"
pathname="C:Users/YChen/Documents/git/working_dir/R/Data/"
file_dir=paste(pathname,infile,sep="")
file_dir_out=paste(pathname,outfile,sep="")
#file_dir_out_2=paste(pathname,outfile2,sep="")
n.periods=1
is.trailing=FALSE
library(zoo)            # Load the zoo package
library(xts)             # Load the xts package
library(PerformanceAnalytics)
# Read the CSV files
raw_securities = read.csv(file_dir,header = FALSE, stringsAsFactors=F)
securities=as.matrix(raw_securities)
securities=as.matrix(sort(securities))
n_sec=dim(securities)[1]
library(Rbbg)
conn=blpConnect()
fields=c("CHG_PCT_1D")
start_date="2012-09-01"
#end_date="2017-06-30"
end_date=Sys.Date()
start.date = as.POSIXct(start_date)
end.date = as.POSIXct(end_date)
########get fund data
x_h=bdh(conn,securities,fields,start.date,end.date,option_names = "periodicitySelection", option_values = "MONTHLY",always.display.tickers = TRUE)
list_ret=unstack(x_h,CHG_PCT_1D~ticker)
list_date=unstack(x_h,date~ticker)
name_list=as.matrix(names(list_ret))
n_sec=dim(name_list)[1]
rfrate=0.005
df.ret=NULL;
df.metrics=NULL
for (i in 1:n_sec) {
df.ret=as.data.frame(list_ret[i]/100)
#df.ret=as.data.frame(list_ret["DERNMOF.US.Equity"]/100)
df.date=as.data.frame(list_date[i])
#df.date=as.data.frame(list_date["DERNMOF.US.Equity"])
df.clean.ret=as.data.frame(df.ret[!is.na(df.ret)])
colnames(df.clean.ret)=colnames(df.ret)
df.clean.date=as.data.frame(df.date[!is.na(df.ret)])
colnames(df.clean.date)=colnames(df.ret)
mtx.date=as.matrix(df.clean.date)
date.date=as.Date(mtx.date)
fund.xts=xts(df.clean.ret,date.date)
nrows=dim(fund.xts)[1]
incep.rows=1:nrows
fund.name=colnames(df.ret)
if (is.trailing){
if (nrows>=n.periods){
trailing.rows=(nrows-n.periods+1):nrows
ret=fund.xts[trailing.rows]
}
else {
ret=fund.xts[incep.rows]
}
}
if (nrows>=n.periods){
totalret=prod(ret+1)-1
ann.ret=(totalret+1)^(12/n.periods)-1
ann.std=sd(ret)*sqrt(12)
downrisk=sd(ret[(ret<0)])*sqrt(12)
v.cumret=matrix(1,nrow=n.periods+1,ncol=1)
v.maxdd=matrix(0,nrow=n.periods,ncol=1)
for (j in 2:(n.periods+1)){
v.cumret[j]=v.cumret[j-1]*(ret[j-1]+1)
v.maxdd[j-1]=v.cumret[j]/max(v.cumret[1:j])-1
}
drawdown=min(v.maxdd)
sharpe=(ann.ret-rfrate)/ann.std
sortino=(ann.ret-rfrate)/downrisk
omega=Omega(ret)
wl=length(which(ret>0))/n.periods
skewness=skewness(ret)
kurtosis=kurtosis(ret)
omega=as.numeric(omega)
df.ret=as.data.frame(cbind(ret))
temp.metrics=as.data.frame(cbind(ann.ret,ann.std,downrisk,drawdown
,sharpe,sortino,omega
,wl,skewness,kurtosis),row.names=fund.name)
df.metrics=rbind(df.metrics,temp.metrics)
}
}
if (is.trailing){
if (nrows>=n.periods){
trailing.rows=(nrows-n.periods+1):nrows
ret=fund.xts[trailing.rows]
}
else {
ret=fund.xts[incep.rows]
}
}
if (is.trailing){
if (nrows>=n.periods){
trailing.rows=(nrows-n.periods+1):nrows
ret=fund.xts[trailing.rows]
}
}
else{
ret=fund.xts[incep.rows]
}
if (is.trailing){
if (nrows>=n.periods){
trailing.rows=(nrows-n.periods+1):nrows
ret=fund.xts[trailing.rows]
}
}else{
ret=fund.xts[incep.rows]
}
source('~/git/working_dir/R/Code/fund_metric.r', echo=TRUE)
source('~/git/working_dir/R/Code/fund_metric.r', echo=TRUE)
source('~/git/working_dir/R/Code/fund_metric.r', echo=TRUE)
getwd()
file_dir
setwd("C:Users/YChen/Documents/git/working_dir/R")
getwd()
library(Rbbg)
conn=blpConnect()
fields=c("CHG_PCT_1D")
securities=c("SPX Index")
start_date="1960-01-05"
end_date="1987-10-16"
#end_date=Sys.Date()
start.date = as.POSIXct(start_date)
end.date = as.POSIXct(end_date)
x_h=bdh(conn,securities,fields,start.date,end.date,
option_names = "periodicitySelection",
option_values = "DAILY",always.display.tickers = TRUE)
list_ret=unstack(x_h,CHG_PCT_1D~ticker)
list_date=unstack(x_h,date~ticker)
df.ret=as.data.frame(list_ret/100)
df.date=as.data.frame(list_date)
mtx.date=as.matrix(df.date)
date.date=as.Date(mtx.date)
library(zoo)            # Load the zoo package
library(xts)             # Load the xts package
sp.xts=xts(df.ret,date.date)
plot(sp.xts,main="Daily Percentage Returns")
qqline(sp.xts,main="Daily returns on S&P 500",
xlab="Quantiles of standard normal",
ylab="Quantiles of S&P 500")
#neg.sp.xts=-sp.xts
#apply.yearly could be replaced by aggregate on timeSeries object, but not so easy xts object
#annualMax.sp.xts = apply.yearly(-sp.xts,max)
sp.timeseries=as.timeSeries.xts(sp.xts)
sp.by=timeSequence(from = start(sp.timeseries),  to = end(sp.timeseries), by = "year")
annualMax.sp.timeSeries = aggregate(-sp.timeseries,sp.by,FUN=max)
#'seriesData' is deprecated.Use 'series' instead.
Xn=sort(series(annualMax.sp.timeSeries))
par(mfrow=c(2,2))
plot(annualMax.sp.timeSeries)
hist(series(annualMax.sp.timeSeries),xlab="Annual maximum")
plot(Xn,-log(-log(ppoints(Xn))),xlab="Annual maximum")
df.ret=as.data.frame(list_ret)
df.date=as.data.frame(list_date)
mtx.date=as.matrix(df.date)
date.date=as.Date(mtx.date)
library(zoo)            # Load the zoo package
library(xts)             # Load the xts package
sp.xts=xts(df.ret,date.date)
plot(sp.xts,main="Daily Percentage Returns")
qqline(sp.xts,main="Daily returns on S&P 500",
xlab="Quantiles of standard normal",
ylab="Quantiles of S&P 500")
#neg.sp.xts=-sp.xts
#apply.yearly could be replaced by aggregate on timeSeries object, but not so easy xts object
#annualMax.sp.xts = apply.yearly(-sp.xts,max)
sp.timeseries=as.timeSeries.xts(sp.xts)
sp.by=timeSequence(from = start(sp.timeseries),  to = end(sp.timeseries), by = "year")
annualMax.sp.timeSeries = aggregate(-sp.timeseries,sp.by,FUN=max)
#'seriesData' is deprecated.Use 'series' instead.
Xn=sort(series(annualMax.sp.timeSeries))
Xn=sort(series(annualMax.sp.timeSeries))
plot(annualMax.sp.timeSeries)
rownames(annualMax.sp.timeSeries)
sp.by=timeSequence(from = start(sp.timeseries),  to = end(sp.timeseries), by = "year",format = "%Y")
annualMax.sp.timeSeries = aggregate(-sp.timeseries,sp.by,FUN=max)
#'seriesData' is deprecated.Use 'series' instead.
Xn=sort(series(annualMax.sp.timeSeries))
#par(mfrow=c(2,2))
plot(annualMax.sp.timeSeries)
sp.by=timeSequence(from = start(sp.timeseries),  to = end(sp.timeseries), by = "year",format = "%Y")
sp.by=timeSequence(from = start(sp.timeseries),  to = end(sp.timeseries), by = "year")
max.rownames=rownames(annualMax.sp.timeSeries)
max.rownames=as.Date(max.rownames,format="%Y")
max.rownames=as.Date(max.rownames,format="%d/%m/%Y")
max.rownames=strptime(as.character(max.rownames))
max.rownames=strptime(as.character(max.rownames),"%Y-%m-%d")
format(max.rownames,"%Y")
max.rownames=format(max.rownames,"%Y")
max.rownames=rownames(annualMax.sp.timeSeries)
max.rownames=strptime(as.character(max.rownames),"%Y-%m-%d")
max.rownames=format(max.rownames,"%Y")
rownames(annualMax.sp.timeSeries)=max.rownames
plot(annualMax.sp.timeSeries)
rownames(annualMax.sp.timeSeries)
max.rownames
annualMax.sp.timeSeries = aggregate(-sp.timeseries,sp.by,FUN=max)
max.rownames=rownames(annualMax.sp.timeSeries)
source('~/git/working_dir/R/Code/perf_a/hflist_risk_metric_v4.R', echo=TRUE)
fret.file=paste(u.name,"_incep_ret.csv",sep="");
file.dir.fret=paste(pathname,fret.file,sep="")
write.csv(list.ret, file.dir.fret)
colnames(ann.ret.5)
colnames(ret.60)
df.clean.bret=df.b.ret[!is.na(df.ret)]
df.clean.bret
class(df.clean.bret)
View(df.b.ret)
df.clean.bret=as.data.frame(df.b.ret[!is.na(df.ret)])
View(df.clean.bret)
df.clean.bret=as.data.frame(df.b.ret[!is.na(df.ret),1])
View(df.clean.bret)
View(df.b.ret)
df.clean.bixret=as.data.frame(df.b.ret[!is.na(df.ret),2])
View(df.clean.bixret)
df.clean.bhfret=as.data.frame(df.b.ret[!is.na(df.ret),1])
colnames(df.clean.bhfret)=colnames(df.b.ret)[1]
df.clean.bixret=as.data.frame(df.b.ret[!is.na(df.ret),2])
colnames(df.clean.bixret)=colnames(df.b.ret)[2]
View(df.clean.bhfret)
View(df.clean.bixret)
class(ret.bhf.60)
bhfret.xts=xts(df.clean.bhfret,date.date)
View(bhfret.xts)
bixret.xts=xts(df.clean.bixret,date.date)
View(bixret.xts)
df.ret[!is.na(df.ret)
]
!is.na(df.ret)
bench.clean.xts=bench.xts[!is.na(df.ret)]
View(bench.clean.xts)
df.clean.bhfret=as.data.frame(df.b.ret[!is.na(df.ret),1])
colnames(df.clean.bhfret)=colnames(df.b.ret)[1]
df.clean.bixret=as.data.frame(df.b.ret[!is.na(df.ret),2])
colnames(df.clean.bixret)=colnames(df.b.ret)[2]
bhfret.xts=xts(df.clean.bhfret,date.date)
bixret.xts=xts(df.clean.bixret,date.date)
source('~/git/working_dir/R/Code/perf_a/hflist_risk_metric_v4.R', echo=TRUE)
write.csv(df.metrics.5, file.dir.out)
source('~/git/working_dir/R/siyuan/ratios_update2.r', echo=TRUE)
source('~/git/working_dir/R/siyuan/ratios_update2.r', echo=TRUE)
source('~/git/working_dir/R/Code/perf_a/hflist_risk_metric_v4.R', echo=TRUE)
source('~/git/working_dir/R/Code/perf_a/hflist_risk_metric_v4.R', echo=TRUE)
source('~/git/working_dir/R/Code/perf_a/hflist_risk_metric_v4.R', echo=TRUE)
source('~/git/working_dir/R/Code/perf_a/hflist_risk_metric_v4.R', echo=TRUE)
source('~/git/working_dir/R/Code/perf_a/hflist_risk_metric_v4.R', echo=TRUE)
source('~/git/working_dir/R/Code/perf_a/hflist_risk_metric_v4.R', echo=TRUE)
source('~/git/working_dir/R/siyuan/Test-threshold0.2.r', echo=TRUE)
View(Enter)
View(trade_N)
View(av_ret)
source('~/git/working_dir/R/siyuan/Test-threshold0.2.r', echo=TRUE)
View(Enter)
View(av_ret)
View(av_ret)
source('~/git/working_dir/R/siyuan/Test-threshold0.2.r', echo=TRUE)
source('~/git/working_dir/R/siyuan/Test-threshold0.2.r', echo=TRUE)
source('~/git/working_dir/R/siyuan/Test-threshold0.2.r', echo=TRUE)
View(enter_disp)
View(av_ret)
View(last_enter)
class(av_ret)
class(trade_N)
rownames(enter_disp)
rownames(av_ret)
output <- data.frame(enter_disp,exit_disp,av_ret,stdev,trade_N,hp,winp,last_exit,last_enter,row.names=exit_disp)
View(output)
output <- data.frame(enter_disp,exit_disp,av_ret,stdev,trade_N,hp,winp,last_exit,last_enter,row.names=c(1,2,3,4))
View(output)
