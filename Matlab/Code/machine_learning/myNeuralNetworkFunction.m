function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 14-Jun-2017 10:49:33.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x4 cell 2, initial 4 input delay states.
%   Each Xi{1,ts} = 2xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 4 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x4 cell 2, final 4 input delay states.
%   Each Xf{1,ts} = 2xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [8;0];
x1_step1.gain = [0.5;1];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 3.6931019;
x2_step1.gain = 0.246715291207742;
x2_step1.ymin = -1;

% Layer 1
b1 = [1.2;2.7;0.4;0.7;-0.6;0.2;1.1;0.9;0.5;-2.3];
IW1_1 = [-0.2 -0.2 -0.01 0.09 1.13 1.85 -0.86 0.39;-0.04 0.24 0.05 0.07 -0.05 -0.01 -0.02 -0.03;-0.01 0.25 -0.001 0.06 0.014 -0.01 0.005 -0.07;0.10 0.58 -0.55979912287718181 0.0084597181654963161 0.37990916470493996 0.9798735124851069 -0.056106415035963773 -0.25523308500671726;0.13338103242084479 -0.16891314375398622 -0.16873736875672504 0.058343508850344089 -0.074753666083308301 -2.0479413946334519 0.027476641342931925 -1.1285769567501081;-0.050314498396186 -0.68625319732349865 0.63226542283386766 -0.27859836127362314 0.89709222751891038 -0.93417522483024429 0.023622188416941088 0.19043828104078597;0.11302572275233611 1.9213180202966014 -0.89391370438354156 -0.28277671331705317 0.64664398536644574 2.151056703484707 -0.086492570945035693 -0.20610209351708755;-0.12182896216060873 0.22456909458854166 0.14966727270491487 -0.049522748777122559 0.080143336980454172 2.0586879033636123 -0.032639334766303166 1.1374283254028583;0.13131015694696296 -0.35754840727680759 0.15479571572333348 -0.18410561637242831 0.5719986713573606 -0.2750044502508151 0.19348541679728759 -0.0033140748051448485;0.3462343983000169 -1.2174939410894232 0.097612201463355253 -1.607330642660149 0.88362065018213132 0.66396866604228122 0.60561001230295108 -0.79545674241512898];
IW1_2 = [-1.1372309425765084 0.070409939469941396 0.61335528483318369 0.58628253131668051;-2.149146079993892 0.12446751178603842 0.070622750883076429 -0.26967434553264646;0.39479319845621219 0.024752441761646697 0.01650540151447932 -0.029150147754804397;3.4877819233904197 1.759781364044593 -0.83601292044409581 -2.2414590836623662;-2.2276126440509301 0.77436851633467518 1.3354970018905266 2.1511469939240464;0.0054075135790206839 -0.66142517848217486 0.60604098949118912 0.95825682272243773;20.630910213096389 -7.2978723422387617 -4.5322808447259977 -2.6707579711242238;1.9648957242571929 -1.05299616988212 -1.2122671258124587 -2.0288616333105098;-0.5211553370115638 -0.33312484274186938 0.19660035690409805 0.53129258190223649;0.069964382061970823 -0.0088445909936958073 -0.51973064550311099 0.33877252541927905];

% Layer 2
b2 = 0.33010641099177401;
LW2_1 = [0.016571324205047182 -0.54195910193233676 0.74824060052195573 -0.3746258641411242 -0.61022634305330825 0.041695226419903385 0.72961726082847245 -0.59843818886748312 -0.080808705825550525 -0.008712217377714989];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.246715291207742;
y1_step1.xoffset = 3.6931019;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,5);
for ts=1:4
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,5);
for ts=1:4
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+3,5)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4]-1,5)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2 3 4]-1,5)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 4);
xits = finalxts(finalxts<=4);
xts = finalxts(finalxts>4)-4;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
