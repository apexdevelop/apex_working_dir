overrides=c("T")
x_h=bdh(conn,securities,fields,start.date,end.date,override_fields,overrides,always.display.tickers = TRUE)
x_h=na.omit(x_h)
list_ret=unstack(x_h,CHG_PCT_1D~ticker)
list_date=unstack(x_h,date~ticker)
test_date1=list_date[,1]
test_date=unlist(list_date)
rm(test_date)
rm(overrides)
rm(override_fields)
test_date=as.data.frame(list_date)
test_date1=as.data.frame(list_date[,1])
test_date1=as.data.frame(list_date[1])
date1=as.Date(list_date[1],"%m/%d/%Y")
date1=as.Date(test_date1,"%m/%d/%Y")
View(test_date1)
rm(test_date1)
z=sapply(list_date,function(x){strptime(x, "%m/%d/%Y")})
rm(z)
mtx_date1=as.matrix(df_date1)
df_date1=as.data.frame(list_date[1])
mtx_date1=as.matrix(df_date1)
date1=as.Date(mtx_date1,"%m/%d/%Y")
View(mtx_date1)
date1=as.Date(mtx_date1)
df_date=sapply(list_date,as.data.frame)
ret1=as.data.frame(list_ret[1])
data1=xts(ret1,date1)
View(data1)
temp.xts=data1
dim(securities)
for(i in 2:n_sec)
{
df_date2=as.data.frame(list_date[i])
mtx_date2=as.matrix(df_date1)
date2=as.Date(mtx_date2)
ret2=as.data.frame(list_ret[i])
data2=xts(ret2,date2)
temp.xts=merge(temp.xts,data2,all=FALSE)
}
n_sec=dim(securities)[1]
for(i in 2:n_sec)
{
df_date2=as.data.frame(list_date[i])
mtx_date2=as.matrix(df_date1)
date2=as.Date(mtx_date2)
ret2=as.data.frame(list_ret[i])
data2=xts(ret2,date2)
temp.xts=merge(temp.xts,data2,all=FALSE)
}
View(data2)
View(data2)
View(data1)
df_date1=as.data.frame(list_date[0])
df_date1=as.data.frame(list_date[1])
View(df_date2)
View(temp.xts)
list_ret=unstack(x_h,CHG_PCT_1D~ticker)
list_date=unstack(x_h,date~ticker)
head(list_date[1])
data2=xts(ret2,date2)
df_date1=as.data.frame(list_date[1])
mtx_date1=as.matrix(df_date1)
date1=as.Date(mtx_date1)
ret1=as.data.frame(list_ret[1])
data1=xts(ret1,date1)
temp.xts=data1
for(i in 2:n_sec)
{
df_date2=as.data.frame(list_date[i])
mtx_date2=as.matrix(df_date2)
date2=as.Date(mtx_date2)
ret2=as.data.frame(list_ret[i])
data2=xts(ret2,date2)
temp.xts=merge(temp.xts,data2,all=FALSE)
}
View(temp.xts)
View(wMat)
View(securities)
wMat=mydata[,2]
wMat=as.data.frame(mydata[,2])
View(wMat)
wMat=as.data.frame(mydata[,2],row.names=securities)
View(wMat)
View(mydata)
name_sec=names(list_ret)
name_sec=as.matrix(names(list_ret))
View(name_sec)
View(securities)
new_wMat=wMat
for (j in 1:n_sec)
{
idx=which(securities==name_sec[j])
if(length(idx)>0)
{
new_wMat[j]=wMat[idx]
}
}
new_wMat=wMat
for (j in 1:n_sec)
{
idx=which(securities==name_sec[j])
if(length(idx)>0)
{
new_wMat[j]=wMat[idx,1]
}
}
View(new_wMat)
wMat[idx,1]
j=1
idx=which(securities==name_sec[j])
new_wMat=wMat
for (j in 1:n_sec)
{
idx=which(securities==name_sec[j])
if(length(idx)>0)
{
new_wMat[j,1]=wMat[idx,1]
}
}
View(new_wMat)
name_list=as.matrix(names(list_ret))
new_wMat=as.data.frame(wMat,row.names=name_list)
for (j in 1:n_sec)
{
idx=which(securities==name_list[j])
if(length(idx)>0)
{
new_wMat[j,1]=wMat[idx,1]
}
}
View(new_wMat)
View(temp.xts)
df_w=as.data.frame(mydata[,2],row.names=securities)
df_new_w=as.data.frame(df_w,row.names=name_list)
for (j in 1:n_sec)
{
idx=which(securities==name_list[j])
if(length(idx)>0)
{
df_new_w[j,1]=df_w[idx,1]
}
}
View(df_new_w)
mat_w=as.matrix(df_new_w)
View(mat_w)
mat_ret=as.matrix(temp.xts)
View(mat_ret)
port_ret=mat_ret*mat_w
port_ret=mat_ret.*mat_w
port_ret=mat_ret%*%mat_w
View(port_ret)
new_date=row.names(mat_ret)
new_date=as.Date(row.names(mat_ret))
View(mat_ret)
View(port_ret)
port_NAV=port_ret+1
dim(port_ret)
n_ob=dim(port_ret)[1]
port_NAV=port_ret
n_ob=dim(port_ret)[1]
ini_NAV=1000
port_ret2=port_net/100+1
for (i in 1:n_ob)
{
port_NAV[i]=product(port_ret2(1:i))*ini_NAV
}
for (i in 1:n_ob)
{
port_NAV[i]=prod(port_ret2(1:i))*ini_NAV
}
port_ret2=port_net/100+1
port_ret2=port_ret/100+1
for (i in 1:n_ob)
{
port_NAV[i]=prod(port_ret2(1:i))*ini_NAV
}
port_ret2=port_ret/100+1
for (i in 1:n_ob)
{
port_NAV[i]=prod(port_ret2[1:i])*ini_NAV
}
View(port_NAV)
plot(port_NAV)
View(port_NAV)
write.csv(port_NAV, "portNAV_output.csv")
write.csv(port_ret, "portRET_output.csv")
library(zoo)            # Load the zoo package
library(xts)             # Load the xts package
# Read the CSV files
path1="./Data/mn_list.csv"
mydata = read.csv(path1,header = FALSE, stringsAsFactors=F)
securities=as.matrix(mydata)
View(securities)
securities=as.matrix(mydata[,1])
View(securities)
securities=as.matrix(mydata[1:116,1])
n_sec=dim(securities)[1]
library(Rbbg)
conn=blpConnect()
fields=c("CHG_PCT_1D")
start.date = as.POSIXct("2012-09-01")
end.date = as.POSIXct("2017-04-30")
x_h=bdh(conn,securities,fields,start.date,end.date,always.display.tickers = TRUE)
View(x_h)
x_h=bdh(conn,securities,fields,start.date,end.date,option_names = "periodicitySelection", option_values = "MONTHLY",always.display.tickers = TRUE)
View(x_h)
list_ret=unstack(x_h,CHG_PCT_1D~ticker)
View(list_ret)
list_date=unstack(x_h,date~ticker)
View(list_date)
name_list=as.matrix(names(list_ret))
View(list_date)
df_date1=as.data.frame(list_date[1])
mtx_date1=as.matrix(df_date1)
date1=as.Date(mtx_date1)
ret1=as.data.frame(list_ret)
data1=xts(ret1,date1)
temp.xts=data1
View(temp.xts)
View(x_h)
View(temp.xts)
mean(temp.xts)
temp_mean=mean(temp.xts,na.rm)
temp_mean=mean(temp.xts,na.rm=TRUE)
mtx_data=as.matrix(temp.xts)
View(mtx_data)
omega_ratio=Omega(temp.xts)
library(PerformanceAnalytics)
omega_ratio=Omega(temp.xts)
View(omega_ratio)
write.csv(omega_ratio, "omega_output.csv")
omega_ratio=t(omega_ratio)
View(omega_ratio)
write.csv(omega_ratio, "omega_output_mn.csv")
library(zoo)            # Load the zoo package
library(xts)             # Load the xts package
# Read the CSV files
path1="./Data/em_list.csv"
mydata = read.csv(path1,header = FALSE, stringsAsFactors=F)
securities=as.matrix(mydata[1:116,1])
n_sec=dim(securities)[1]
library(Rbbg)
conn=blpConnect()
fields=c("CHG_PCT_1D")
start.date = as.POSIXct("2012-09-01")
end.date = as.POSIXct("2017-04-30")
x_h=bdh(conn,securities,fields,start.date,end.date,option_names = "periodicitySelection", option_values = "MONTHLY",always.display.tickers = TRUE)
#x_h=na.omit(x_h)
list_ret=unstack(x_h,CHG_PCT_1D~ticker)
list_date=unstack(x_h,date~ticker)
name_list=as.matrix(names(list_ret))
df_date1=as.data.frame(list_date[1])
mtx_date1=as.matrix(df_date1)
date1=as.Date(mtx_date1)
ret1=as.data.frame(list_ret)
data1=xts(ret1,date1)
temp.xts=data1
library(PerformanceAnalytics)
omega_ratio=Omega(temp.xts)
omega_ratio=t(omega_ratio)
write.csv(omega_ratio, "omega_output_em.csv")
library(zoo)            # Load the zoo package
library(xts)             # Load the xts package
# Read the CSV files
path1="./Data/em_list.csv"
mydata = read.csv(path1,header = FALSE, stringsAsFactors=F)
securities=as.matrix(mydata[1:195,1])
n_sec=dim(securities)[1]
library(Rbbg)
conn=blpConnect()
fields=c("CHG_PCT_1D")
start.date = as.POSIXct("2012-09-01")
end.date = as.POSIXct("2017-04-30")
x_h=bdh(conn,securities,fields,start.date,end.date,option_names = "periodicitySelection", option_values = "MONTHLY",always.display.tickers = TRUE)
#x_h=na.omit(x_h)
list_ret=unstack(x_h,CHG_PCT_1D~ticker)
list_date=unstack(x_h,date~ticker)
name_list=as.matrix(names(list_ret))
df_date1=as.data.frame(list_date[1])
mtx_date1=as.matrix(df_date1)
date1=as.Date(mtx_date1)
ret1=as.data.frame(list_ret)
data1=xts(ret1,date1)
temp.xts=data1
library(PerformanceAnalytics)
omega_ratio=Omega(temp.xts)
omega_ratio=t(omega_ratio)
write.csv(omega_ratio, "omega_output_em.csv")
library(zoo)            # Load the zoo package
library(xts)             # Load the xts package
# Read the CSV files
path1="./Data/asia_list.csv"
mydata = read.csv(path1,header = FALSE, stringsAsFactors=F)
securities=as.matrix(mydata[1:195,1])
n_sec=dim(securities)[1]
library(Rbbg)
conn=blpConnect()
fields=c("CHG_PCT_1D")
start.date = as.POSIXct("2012-09-01")
end.date = as.POSIXct("2017-04-30")
x_h=bdh(conn,securities,fields,start.date,end.date,option_names = "periodicitySelection", option_values = "MONTHLY",always.display.tickers = TRUE)
#x_h=na.omit(x_h)
list_ret=unstack(x_h,CHG_PCT_1D~ticker)
list_date=unstack(x_h,date~ticker)
name_list=as.matrix(names(list_ret))
df_date1=as.data.frame(list_date[1])
mtx_date1=as.matrix(df_date1)
date1=as.Date(mtx_date1)
ret1=as.data.frame(list_ret)
data1=xts(ret1,date1)
temp.xts=data1
library(PerformanceAnalytics)
omega_ratio=Omega(temp.xts)
omega_ratio=t(omega_ratio)
write.csv(omega_ratio, "omega_output_asia.csv")
View(mydata)
library(zoo)            # Load the zoo package
library(xts)             # Load the xts package
# Read the CSV files
path1="./Data/asia_list.csv"
mydata = read.csv(path1,header = FALSE, stringsAsFactors=F)
securities=as.matrix(mydata[1:177,1])
n_sec=dim(securities)[1]
library(Rbbg)
conn=blpConnect()
fields=c("CHG_PCT_1D")
start.date = as.POSIXct("2012-09-01")
end.date = as.POSIXct("2017-04-30")
x_h=bdh(conn,securities,fields,start.date,end.date,option_names = "periodicitySelection", option_values = "MONTHLY",always.display.tickers = TRUE)
#x_h=na.omit(x_h)
list_ret=unstack(x_h,CHG_PCT_1D~ticker)
list_date=unstack(x_h,date~ticker)
name_list=as.matrix(names(list_ret))
df_date1=as.data.frame(list_date[1])
mtx_date1=as.matrix(df_date1)
date1=as.Date(mtx_date1)
ret1=as.data.frame(list_ret)
data1=xts(ret1,date1)
temp.xts=data1
library(PerformanceAnalytics)
omega_ratio=Omega(temp.xts)
omega_ratio=t(omega_ratio)
write.csv(omega_ratio, "omega_output_asia.csv")
library(zoo)            # Load the zoo package
library(xts)             # Load the xts package
# Read the CSV files
path1="./Data/allhf_list.csv"
mydata = read.csv(path1,header = FALSE, stringsAsFactors=F)
securities=as.matrix(mydata[1:1504,1])
n_sec=dim(securities)[1]
library(Rbbg)
conn=blpConnect()
fields=c("CHG_PCT_1D")
start.date = as.POSIXct("2012-09-01")
end.date = as.POSIXct("2017-04-30")
x_h=bdh(conn,securities,fields,start.date,end.date,option_names = "periodicitySelection", option_values = "MONTHLY",always.display.tickers = TRUE)
#x_h=na.omit(x_h)
list_ret=unstack(x_h,CHG_PCT_1D~ticker)
list_date=unstack(x_h,date~ticker)
name_list=as.matrix(names(list_ret))
df_date1=as.data.frame(list_date[1])
mtx_date1=as.matrix(df_date1)
date1=as.Date(mtx_date1)
ret1=as.data.frame(list_ret)
data1=xts(ret1,date1)
temp.xts=data1
library(PerformanceAnalytics)
omega_ratio=Omega(temp.xts)
omega_ratio=t(omega_ratio)
write.csv(omega_ratio, "omega_output.csv")
library(zoo)            # Load the zoo package
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
cwd
pwd
wd
mydata = read.csv(file_dir,header = FALSE, stringsAsFactors=F)
getwd()
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
file_dir_out=paste(pathname,outfile,sep="")
write.csv(omega_ratio, file_dir_out)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
dim(data1)
View(data1)
dim(data1)[1]
trailing12.rows=(dim(data1)[1]-11):dim(data1)[1]
trailing12.rows
mrtn.table=t(table.CalendarReturns(data1[,1:2]))
View(mrtn.table)
View(mrtn.table)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
View(mrtn.table)
data1[,1:2]
View(securities)
View(name_list)
View(x_h)
test_ret=unlist(x_h,CHG_PCT_1D~ticker)
test_ret=unlist(x_h)
View(x_h)
type(x_h)
class(x_h)
securities=as.matrix(securities)
x_h=bdh(conn,securities,fields,start.date,end.date,option_names = "periodicitySelection", option_values = "MONTHLY",always.display.tickers = TRUE)
test_names=names(list_ret)
class(securities)
mydata = read.csv(file_dir,header = FALSE)
View(mydata)
securities=as.matrix(mydata)
x_h=bdh(conn,securities,fields,start.date,end.date,option_names = "periodicitySelection", option_values = "MONTHLY",always.display.tickers = TRUE)
list_ret=unstack(x_h,CHG_PCT_1D~ticker)
mydata = read.csv(file_dir,header = FALSE)
test_ret=unstack(x_h)
test_ticker=unique(x_h$ticker)
test_ret=unstack(x_h,test_ticker)
View(x_h)
View(list_ret)
mrtn.table=t(table.CalendarReturns(data1[,3:4]))
View(mrtn.table)
mrtn.table=t(table.CalendarReturns(data1[,11:12]))
View(mrtn.table)
View(data1)
test_data=data1[,11:12]/100
mrtn.table=t(table.CalendarReturns(test_data))
View(mrtn.table)
source('Y:/working_directory/R/Code/rbbg_analyst_1228.r', echo=TRUE)
source('Y:/working_directory/R/Code/rbbg_analyst_1228.r', echo=TRUE)
View(v_colnames0)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
dim(ret.xts)[2]
num.xts=ret.xts/100
View(num.xts)
v_colnames=rownames(list_ret)
class(list_ret)
v_colnames=rownames(list_rating)
v_colnames=names(list_rating)
v_colnames=rownames(list_rating)
source('Y:/working_directory/R/Code/rbbg_analyst_1228.r', echo=TRUE)
View(v_summary)
v_colnames
View(list_rating)
View(list_rating)
class(list_rating)
View(v_colnames0)
names(list_rating)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
dim(securities)[1]
securities=as.matrix(raw_securities)
securities=as.matrix(sort(securities))
n_sec=dim(securities)[1]
View(name_list)
manager.col=11
peers.cols=12:13
#indexes.cols
#Rf.col
nrows=dim(ret.xts)[1]
trailing12.rows=(nrows-11):nrows
trailing36.rows=(nrows-35):nrows
trailing60.rows=(nrows-59):nrows
library(PerformanceAnalytics)
test_data=num.xts[,c(manager.col,peers.cols)]
incep.rows=1:nrows
ret.12=num.xts[trailing12.rows,c(manager.col,peers.cols)]
ret.36=num.xts[trailing36.rows,c(manager.col,peers.cols)]
ret.incep=num.xts[incep.rows,c(manager.col,peers.cols)]
ann.ret=Return.annualized(ret.12)
View(ann.ret)
ann.ret=Return.annualized(ret.12,scale=12)
View(ann.ret)
ann.ret.12=Return.annualized(ret.12)
wl.12=UpsideFrequency(ret.12,MAR=0)/12
wl.12=UpsideFrequency(ret.12,MAR=0)
omega.12=Omega(ret.12)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
omega_ratio=cbind(omega.12,omega.36,omega.incep)
View(omega_ratio)
write.csv(omega_ratio, file_dir_out)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
View(securities)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
source('Y:/working_directory/R/Code/risk_metric.r', echo=TRUE)
View(securities)
n_sec=dim(name_list)[1]
nrows=dim(ret.xts)[1]
trailing12.rows=(nrows-11):nrows
trailing36.rows=(nrows-35):nrows
trailing60.rows=(nrows-59):nrows
incep.rows=1:nrows
library(PerformanceAnalytics)
ret.12=num.xts[trailing12.rows,1:n_sec]
ret.36=num.xts[trailing36.rows,1:n_sec]
ret.incep=num.xts[incep.rows,1:n_sec]
#mrtn.table=t(table.CalendarReturns(test_data))
#stats.table=t(table.Stats(test_data))
ann.ret.12=Return.annualized(ret.12)
omega.12=Omega(ret.12)
omega.36=Omega(ret.36)
omega.incep=Omega(ret.incep)
omega.12=t(omega.12)
omega.36=t(omega.36)
omega.incep=t(omega.incep)
wl.12=UpsideFrequency(ret.12,MAR=0)
#omega_ratio=Omega(num.xts)
#omega_ratio=t(omega_ratio)
#setwd("./Data")
omega_ratio=cbind(omega.12,omega.36,omega.incep)
file_dir_out=paste(pathname,outfile,sep="")
write.csv(omega_ratio, file_dir_out)
